// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/order.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2forder_2eproto_2epb_2eh
#define proto_2forder_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2forder_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2forder_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2forder_2eproto;
class ExecutionReport;
struct ExecutionReportDefaultTypeInternal;
extern ExecutionReportDefaultTypeInternal _ExecutionReport_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Order_Side : int {
  Order_Side_BUY = 0,
  Order_Side_SELL = 1,
  Order_Side_Order_Side_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Order_Side_Order_Side_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Order_Side_IsValid(int value);
extern const uint32_t Order_Side_internal_data_[];
constexpr Order_Side Order_Side_Side_MIN = static_cast<Order_Side>(0);
constexpr Order_Side Order_Side_Side_MAX = static_cast<Order_Side>(1);
constexpr int Order_Side_Side_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Order_Side_descriptor();
template <typename T>
const std::string& Order_Side_Name(T value) {
  static_assert(std::is_same<T, Order_Side>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Side_Name().");
  return Order_Side_Name(static_cast<Order_Side>(value));
}
template <>
inline const std::string& Order_Side_Name(Order_Side value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Order_Side_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Order_Side_Parse(absl::string_view name, Order_Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Order_Side>(
      Order_Side_descriptor(), name, value);
}
enum ExecutionReport_Status : int {
  ExecutionReport_Status_FILLED = 0,
  ExecutionReport_Status_REJECTED = 1,
  ExecutionReport_Status_PARTIALLY_FILLED = 2,
  ExecutionReport_Status_ExecutionReport_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExecutionReport_Status_ExecutionReport_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExecutionReport_Status_IsValid(int value);
extern const uint32_t ExecutionReport_Status_internal_data_[];
constexpr ExecutionReport_Status ExecutionReport_Status_Status_MIN = static_cast<ExecutionReport_Status>(0);
constexpr ExecutionReport_Status ExecutionReport_Status_Status_MAX = static_cast<ExecutionReport_Status>(2);
constexpr int ExecutionReport_Status_Status_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ExecutionReport_Status_descriptor();
template <typename T>
const std::string& ExecutionReport_Status_Name(T value) {
  static_assert(std::is_same<T, ExecutionReport_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return ExecutionReport_Status_Name(static_cast<ExecutionReport_Status>(value));
}
template <>
inline const std::string& ExecutionReport_Status_Name(ExecutionReport_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExecutionReport_Status_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ExecutionReport_Status_Parse(absl::string_view name, ExecutionReport_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionReport_Status>(
      ExecutionReport_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Order final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Order* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Order));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Order(
      ::google::protobuf::internal::ConstantInitialized);

  inline Order(const Order& from) : Order(nullptr, from) {}
  inline Order(Order&& from) noexcept
      : Order(nullptr, std::move(from)) {}
  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
        &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Order& a, Order& b) { a.Swap(&b); }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Order>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Order& from) { Order::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Order* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Order"; }

 protected:
  explicit Order(::google::protobuf::Arena* arena);
  Order(::google::protobuf::Arena* arena, const Order& from);
  Order(::google::protobuf::Arena* arena, Order&& from) noexcept
      : Order(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Side = Order_Side;
  static constexpr Side BUY = Order_Side_BUY;
  static constexpr Side SELL = Order_Side_SELL;
  static inline bool Side_IsValid(int value) {
    return Order_Side_IsValid(value);
  }
  static constexpr Side Side_MIN = Order_Side_Side_MIN;
  static constexpr Side Side_MAX = Order_Side_Side_MAX;
  static constexpr int Side_ARRAYSIZE = Order_Side_Side_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Side_descriptor() {
    return Order_Side_descriptor();
  }
  template <typename T>
  static inline const std::string& Side_Name(T value) {
    return Order_Side_Name(value);
  }
  static inline bool Side_Parse(absl::string_view name, Side* value) {
    return Order_Side_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kPriceFieldNumber = 4,
    kSideFieldNumber = 3,
    kQuantityFieldNumber = 5,
  };
  // string order_id = 1;
  void clear_order_id() ;
  const std::string& order_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* value);

  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
      const std::string& value);
  std::string* _internal_mutable_order_id();

  public:
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // double price = 4;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // .Order.Side side = 3;
  void clear_side() ;
  ::Order_Side side() const;
  void set_side(::Order_Side value);

  private:
  ::Order_Side _internal_side() const;
  void _internal_set_side(::Order_Side value);

  public:
  // int32 quantity = 5;
  void clear_quantity() ;
  ::int32_t quantity() const;
  void set_quantity(::int32_t value);

  private:
  ::int32_t _internal_quantity() const;
  void _internal_set_quantity(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Order)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      28, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Order& from_msg);
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    double price_;
    int side_;
    ::int32_t quantity_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2forder_2eproto;
};
// -------------------------------------------------------------------

class ExecutionReport final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExecutionReport) */ {
 public:
  inline ExecutionReport() : ExecutionReport(nullptr) {}
  ~ExecutionReport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExecutionReport* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExecutionReport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExecutionReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExecutionReport(const ExecutionReport& from) : ExecutionReport(nullptr, from) {}
  inline ExecutionReport(ExecutionReport&& from) noexcept
      : ExecutionReport(nullptr, std::move(from)) {}
  inline ExecutionReport& operator=(const ExecutionReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionReport& operator=(ExecutionReport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionReport* internal_default_instance() {
    return reinterpret_cast<const ExecutionReport*>(
        &_ExecutionReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ExecutionReport& a, ExecutionReport& b) { a.Swap(&b); }
  inline void Swap(ExecutionReport* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionReport* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExecutionReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExecutionReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExecutionReport& from) { ExecutionReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExecutionReport* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ExecutionReport"; }

 protected:
  explicit ExecutionReport(::google::protobuf::Arena* arena);
  ExecutionReport(::google::protobuf::Arena* arena, const ExecutionReport& from);
  ExecutionReport(::google::protobuf::Arena* arena, ExecutionReport&& from) noexcept
      : ExecutionReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Status = ExecutionReport_Status;
  static constexpr Status FILLED = ExecutionReport_Status_FILLED;
  static constexpr Status REJECTED = ExecutionReport_Status_REJECTED;
  static constexpr Status PARTIALLY_FILLED = ExecutionReport_Status_PARTIALLY_FILLED;
  static inline bool Status_IsValid(int value) {
    return ExecutionReport_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = ExecutionReport_Status_Status_MIN;
  static constexpr Status Status_MAX = ExecutionReport_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = ExecutionReport_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return ExecutionReport_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return ExecutionReport_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return ExecutionReport_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // string order_id = 1;
  void clear_order_id() ;
  const std::string& order_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* value);

  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
      const std::string& value);
  std::string* _internal_mutable_order_id();

  public:
  // .ExecutionReport.Status status = 2;
  void clear_status() ;
  ::ExecutionReport_Status status() const;
  void set_status(::ExecutionReport_Status value);

  private:
  ::ExecutionReport_Status _internal_status() const;
  void _internal_set_status(::ExecutionReport_Status value);

  public:
  // int32 total = 3;
  void clear_total() ;
  ::int32_t total() const;
  void set_total(::int32_t value);

  private:
  ::int32_t _internal_total() const;
  void _internal_set_total(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ExecutionReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExecutionReport& from_msg);
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    int status_;
    ::int32_t total_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2forder_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Order

// string order_id = 1;
inline void Order::clear_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& Order::order_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Order.order_id)
  return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_order_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Order.order_id)
}
inline std::string* Order::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:Order.order_id)
  return _s;
}
inline const std::string& Order::_internal_order_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_id_.Get();
}
inline void Order::_internal_set_order_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* Order::release_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Order.order_id)
  return _impl_.order_id_.Release();
}
inline void Order::set_allocated_order_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Order.order_id)
}

// string symbol = 2;
inline void Order::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Order::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Order.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Order.symbol)
}
inline std::string* Order::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:Order.symbol)
  return _s;
}
inline const std::string& Order::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Order::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Order::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Order.symbol)
  return _impl_.symbol_.Release();
}
inline void Order::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Order.symbol)
}

// .Order.Side side = 3;
inline void Order::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = 0;
}
inline ::Order_Side Order::side() const {
  // @@protoc_insertion_point(field_get:Order.side)
  return _internal_side();
}
inline void Order::set_side(::Order_Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Order.side)
}
inline ::Order_Side Order::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Order_Side>(_impl_.side_);
}
inline void Order::_internal_set_side(::Order_Side value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = value;
}

// double price = 4;
inline void Order::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:Order.price)
  return _internal_price();
}
inline void Order::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Order.price)
}
inline double Order::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void Order::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// int32 quantity = 5;
inline void Order::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline ::int32_t Order::quantity() const {
  // @@protoc_insertion_point(field_get:Order.quantity)
  return _internal_quantity();
}
inline void Order::set_quantity(::int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Order.quantity)
}
inline ::int32_t Order::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void Order::_internal_set_quantity(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// -------------------------------------------------------------------

// ExecutionReport

// string order_id = 1;
inline void ExecutionReport::clear_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& ExecutionReport::order_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExecutionReport.order_id)
  return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecutionReport::set_order_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExecutionReport.order_id)
}
inline std::string* ExecutionReport::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:ExecutionReport.order_id)
  return _s;
}
inline const std::string& ExecutionReport::_internal_order_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_id_.Get();
}
inline void ExecutionReport::_internal_set_order_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(value, GetArena());
}
inline std::string* ExecutionReport::_internal_mutable_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* ExecutionReport::release_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExecutionReport.order_id)
  return _impl_.order_id_.Release();
}
inline void ExecutionReport::set_allocated_order_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ExecutionReport.order_id)
}

// .ExecutionReport.Status status = 2;
inline void ExecutionReport::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::ExecutionReport_Status ExecutionReport::status() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.status)
  return _internal_status();
}
inline void ExecutionReport::set_status(::ExecutionReport_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.status)
}
inline ::ExecutionReport_Status ExecutionReport::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ExecutionReport_Status>(_impl_.status_);
}
inline void ExecutionReport::_internal_set_status(::ExecutionReport_Status value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// int32 total = 3;
inline void ExecutionReport::clear_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = 0;
}
inline ::int32_t ExecutionReport::total() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.total)
  return _internal_total();
}
inline void ExecutionReport::set_total(::int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.total)
}
inline ::int32_t ExecutionReport::_internal_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_;
}
inline void ExecutionReport::_internal_set_total(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Order_Side> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Order_Side>() {
  return ::Order_Side_descriptor();
}
template <>
struct is_proto_enum<::ExecutionReport_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ExecutionReport_Status>() {
  return ::ExecutionReport_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2forder_2eproto_2epb_2eh
