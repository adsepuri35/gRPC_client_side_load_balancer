// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/order.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2forder_2eproto_2epb_2eh
#define proto_2forder_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2forder_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2forder_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2forder_2eproto;
class ExecutionReport;
struct ExecutionReportDefaultTypeInternal;
extern ExecutionReportDefaultTypeInternal _ExecutionReport_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Side : int {
  BUY = 0,
  SELL = 1,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Side_IsValid(int value);
extern const uint32_t Side_internal_data_[];
constexpr Side Side_MIN = static_cast<Side>(0);
constexpr Side Side_MAX = static_cast<Side>(1);
constexpr int Side_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Side_descriptor();
template <typename T>
const std::string& Side_Name(T value) {
  static_assert(std::is_same<T, Side>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Side_Name().");
  return Side_Name(static_cast<Side>(value));
}
template <>
inline const std::string& Side_Name(Side value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Side_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Side_Parse(absl::string_view name, Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Side>(
      Side_descriptor(), name, value);
}
enum OrderType : int {
  MARKET = 0,
  LIMIT = 1,
  STOP = 2,
  STOP_LIMIT = 3,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderType_IsValid(int value);
extern const uint32_t OrderType_internal_data_[];
constexpr OrderType OrderType_MIN = static_cast<OrderType>(0);
constexpr OrderType OrderType_MAX = static_cast<OrderType>(3);
constexpr int OrderType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
OrderType_descriptor();
template <typename T>
const std::string& OrderType_Name(T value) {
  static_assert(std::is_same<T, OrderType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderType_Name().");
  return OrderType_Name(static_cast<OrderType>(value));
}
template <>
inline const std::string& OrderType_Name(OrderType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OrderType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool OrderType_Parse(absl::string_view name, OrderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderType>(
      OrderType_descriptor(), name, value);
}
enum TimeInForce : int {
  GOOD_TILL_CANCEL = 0,
  IMMEDIATE_OR_CANCEL = 1,
  FILL_OR_KILL = 2,
  DAY = 3,
  TimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TimeInForce_IsValid(int value);
extern const uint32_t TimeInForce_internal_data_[];
constexpr TimeInForce TimeInForce_MIN = static_cast<TimeInForce>(0);
constexpr TimeInForce TimeInForce_MAX = static_cast<TimeInForce>(3);
constexpr int TimeInForce_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TimeInForce_descriptor();
template <typename T>
const std::string& TimeInForce_Name(T value) {
  static_assert(std::is_same<T, TimeInForce>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TimeInForce_Name().");
  return TimeInForce_Name(static_cast<TimeInForce>(value));
}
template <>
inline const std::string& TimeInForce_Name(TimeInForce value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TimeInForce_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TimeInForce_Parse(absl::string_view name, TimeInForce* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeInForce>(
      TimeInForce_descriptor(), name, value);
}
enum ExecutionType : int {
  NEW = 0,
  PARTIAL_FILL = 1,
  FILL = 2,
  CANCELLED = 3,
  REJECTED = 4,
  EXPIRED = 5,
  ExecutionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExecutionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExecutionType_IsValid(int value);
extern const uint32_t ExecutionType_internal_data_[];
constexpr ExecutionType ExecutionType_MIN = static_cast<ExecutionType>(0);
constexpr ExecutionType ExecutionType_MAX = static_cast<ExecutionType>(5);
constexpr int ExecutionType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ExecutionType_descriptor();
template <typename T>
const std::string& ExecutionType_Name(T value) {
  static_assert(std::is_same<T, ExecutionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExecutionType_Name().");
  return ExecutionType_Name(static_cast<ExecutionType>(value));
}
template <>
inline const std::string& ExecutionType_Name(ExecutionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExecutionType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ExecutionType_Parse(absl::string_view name, ExecutionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionType>(
      ExecutionType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Order final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Order* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Order));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Order(
      ::google::protobuf::internal::ConstantInitialized);

  inline Order(const Order& from) : Order(nullptr, from) {}
  inline Order(Order&& from) noexcept
      : Order(nullptr, std::move(from)) {}
  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
        &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Order& a, Order& b) { a.Swap(&b); }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Order>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Order& from) { Order::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Order* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Order"; }

 protected:
  explicit Order(::google::protobuf::Arena* arena);
  Order(::google::protobuf::Arena* arena, const Order& from);
  Order(::google::protobuf::Arena* arena, Order&& from) noexcept
      : Order(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kAccountIdFieldNumber = 9,
    kExchangeIdFieldNumber = 11,
    kSideFieldNumber = 3,
    kOrderTypeFieldNumber = 4,
    kPriceFieldNumber = 5,
    kStopPriceFieldNumber = 6,
    kQuantityFieldNumber = 7,
    kTimeInForceFieldNumber = 8,
    kTimestampFieldNumber = 10,
  };
  // string order_id = 1;
  void clear_order_id() ;
  const std::string& order_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* value);

  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
      const std::string& value);
  std::string* _internal_mutable_order_id();

  public:
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string account_id = 9;
  void clear_account_id() ;
  const std::string& account_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* value);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string exchange_id = 11;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* value);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // .Side side = 3;
  void clear_side() ;
  ::Side side() const;
  void set_side(::Side value);

  private:
  ::Side _internal_side() const;
  void _internal_set_side(::Side value);

  public:
  // .OrderType order_type = 4;
  void clear_order_type() ;
  ::OrderType order_type() const;
  void set_order_type(::OrderType value);

  private:
  ::OrderType _internal_order_type() const;
  void _internal_set_order_type(::OrderType value);

  public:
  // double price = 5;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double stop_price = 6;
  void clear_stop_price() ;
  double stop_price() const;
  void set_stop_price(double value);

  private:
  double _internal_stop_price() const;
  void _internal_set_stop_price(double value);

  public:
  // int32 quantity = 7;
  void clear_quantity() ;
  ::int32_t quantity() const;
  void set_quantity(::int32_t value);

  private:
  ::int32_t _internal_quantity() const;
  void _internal_set_quantity(::int32_t value);

  public:
  // .TimeInForce time_in_force = 8;
  void clear_time_in_force() ;
  ::TimeInForce time_in_force() const;
  void set_time_in_force(::TimeInForce value);

  private:
  ::TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::TimeInForce value);

  public:
  // int64 timestamp = 10;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Order)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Order& from_msg);
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::google::protobuf::internal::ArenaStringPtr exchange_id_;
    int side_;
    int order_type_;
    double price_;
    double stop_price_;
    ::int32_t quantity_;
    int time_in_force_;
    ::int64_t timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2forder_2eproto;
};
// -------------------------------------------------------------------

class ExecutionReport final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExecutionReport) */ {
 public:
  inline ExecutionReport() : ExecutionReport(nullptr) {}
  ~ExecutionReport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExecutionReport* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExecutionReport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExecutionReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExecutionReport(const ExecutionReport& from) : ExecutionReport(nullptr, from) {}
  inline ExecutionReport(ExecutionReport&& from) noexcept
      : ExecutionReport(nullptr, std::move(from)) {}
  inline ExecutionReport& operator=(const ExecutionReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionReport& operator=(ExecutionReport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionReport* internal_default_instance() {
    return reinterpret_cast<const ExecutionReport*>(
        &_ExecutionReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ExecutionReport& a, ExecutionReport& b) { a.Swap(&b); }
  inline void Swap(ExecutionReport* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionReport* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExecutionReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExecutionReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExecutionReport& from) { ExecutionReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExecutionReport* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ExecutionReport"; }

 protected:
  explicit ExecutionReport(::google::protobuf::Arena* arena);
  ExecutionReport(::google::protobuf::Arena* arena, const ExecutionReport& from);
  ExecutionReport(::google::protobuf::Arena* arena, ExecutionReport&& from) noexcept
      : ExecutionReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kExecutionIdFieldNumber = 2,
    kSymbolFieldNumber = 4,
    kRejectReasonFieldNumber = 10,
    kExchangeIdFieldNumber = 12,
    kAdditionalInfoFieldNumber = 14,
    kExecutionTypeFieldNumber = 3,
    kSideFieldNumber = 5,
    kExecutedPriceFieldNumber = 6,
    kExecutedQuantityFieldNumber = 7,
    kRemainingQuantityFieldNumber = 8,
    kAveragePriceFieldNumber = 9,
    kTimestampFieldNumber = 11,
    kCommissionFieldNumber = 13,
  };
  // string order_id = 1;
  void clear_order_id() ;
  const std::string& order_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* value);

  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
      const std::string& value);
  std::string* _internal_mutable_order_id();

  public:
  // string execution_id = 2;
  void clear_execution_id() ;
  const std::string& execution_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_execution_id(Arg_&& arg, Args_... args);
  std::string* mutable_execution_id();
  PROTOBUF_NODISCARD std::string* release_execution_id();
  void set_allocated_execution_id(std::string* value);

  private:
  const std::string& _internal_execution_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execution_id(
      const std::string& value);
  std::string* _internal_mutable_execution_id();

  public:
  // string symbol = 4;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string reject_reason = 10;
  void clear_reject_reason() ;
  const std::string& reject_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reject_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reject_reason();
  PROTOBUF_NODISCARD std::string* release_reject_reason();
  void set_allocated_reject_reason(std::string* value);

  private:
  const std::string& _internal_reject_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reject_reason(
      const std::string& value);
  std::string* _internal_mutable_reject_reason();

  public:
  // string exchange_id = 12;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* value);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string additional_info = 14;
  void clear_additional_info() ;
  const std::string& additional_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_additional_info(Arg_&& arg, Args_... args);
  std::string* mutable_additional_info();
  PROTOBUF_NODISCARD std::string* release_additional_info();
  void set_allocated_additional_info(std::string* value);

  private:
  const std::string& _internal_additional_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_info(
      const std::string& value);
  std::string* _internal_mutable_additional_info();

  public:
  // .ExecutionType execution_type = 3;
  void clear_execution_type() ;
  ::ExecutionType execution_type() const;
  void set_execution_type(::ExecutionType value);

  private:
  ::ExecutionType _internal_execution_type() const;
  void _internal_set_execution_type(::ExecutionType value);

  public:
  // .Side side = 5;
  void clear_side() ;
  ::Side side() const;
  void set_side(::Side value);

  private:
  ::Side _internal_side() const;
  void _internal_set_side(::Side value);

  public:
  // double executed_price = 6;
  void clear_executed_price() ;
  double executed_price() const;
  void set_executed_price(double value);

  private:
  double _internal_executed_price() const;
  void _internal_set_executed_price(double value);

  public:
  // int32 executed_quantity = 7;
  void clear_executed_quantity() ;
  ::int32_t executed_quantity() const;
  void set_executed_quantity(::int32_t value);

  private:
  ::int32_t _internal_executed_quantity() const;
  void _internal_set_executed_quantity(::int32_t value);

  public:
  // int32 remaining_quantity = 8;
  void clear_remaining_quantity() ;
  ::int32_t remaining_quantity() const;
  void set_remaining_quantity(::int32_t value);

  private:
  ::int32_t _internal_remaining_quantity() const;
  void _internal_set_remaining_quantity(::int32_t value);

  public:
  // double average_price = 9;
  void clear_average_price() ;
  double average_price() const;
  void set_average_price(double value);

  private:
  double _internal_average_price() const;
  void _internal_set_average_price(double value);

  public:
  // int64 timestamp = 11;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // double commission = 13;
  void clear_commission() ;
  double commission() const;
  void set_commission(double value);

  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);

  public:
  // @@protoc_insertion_point(class_scope:ExecutionReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 0,
      97, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExecutionReport& from_msg);
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr execution_id_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr reject_reason_;
    ::google::protobuf::internal::ArenaStringPtr exchange_id_;
    ::google::protobuf::internal::ArenaStringPtr additional_info_;
    int execution_type_;
    int side_;
    double executed_price_;
    ::int32_t executed_quantity_;
    ::int32_t remaining_quantity_;
    double average_price_;
    ::int64_t timestamp_;
    double commission_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2forder_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Order

// string order_id = 1;
inline void Order::clear_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& Order::order_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Order.order_id)
  return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_order_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Order.order_id)
}
inline std::string* Order::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:Order.order_id)
  return _s;
}
inline const std::string& Order::_internal_order_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_id_.Get();
}
inline void Order::_internal_set_order_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* Order::release_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Order.order_id)
  return _impl_.order_id_.Release();
}
inline void Order::set_allocated_order_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Order.order_id)
}

// string symbol = 2;
inline void Order::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Order::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Order.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Order.symbol)
}
inline std::string* Order::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:Order.symbol)
  return _s;
}
inline const std::string& Order::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Order::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Order::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Order.symbol)
  return _impl_.symbol_.Release();
}
inline void Order::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Order.symbol)
}

// .Side side = 3;
inline void Order::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = 0;
}
inline ::Side Order::side() const {
  // @@protoc_insertion_point(field_get:Order.side)
  return _internal_side();
}
inline void Order::set_side(::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Order.side)
}
inline ::Side Order::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Side>(_impl_.side_);
}
inline void Order::_internal_set_side(::Side value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = value;
}

// .OrderType order_type = 4;
inline void Order::clear_order_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_ = 0;
}
inline ::OrderType Order::order_type() const {
  // @@protoc_insertion_point(field_get:Order.order_type)
  return _internal_order_type();
}
inline void Order::set_order_type(::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:Order.order_type)
}
inline ::OrderType Order::_internal_order_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::OrderType>(_impl_.order_type_);
}
inline void Order::_internal_set_order_type(::OrderType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_ = value;
}

// double price = 5;
inline void Order::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:Order.price)
  return _internal_price();
}
inline void Order::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Order.price)
}
inline double Order::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void Order::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double stop_price = 6;
inline void Order::clear_stop_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_price_ = 0;
}
inline double Order::stop_price() const {
  // @@protoc_insertion_point(field_get:Order.stop_price)
  return _internal_stop_price();
}
inline void Order::set_stop_price(double value) {
  _internal_set_stop_price(value);
  // @@protoc_insertion_point(field_set:Order.stop_price)
}
inline double Order::_internal_stop_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stop_price_;
}
inline void Order::_internal_set_stop_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_price_ = value;
}

// int32 quantity = 7;
inline void Order::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline ::int32_t Order::quantity() const {
  // @@protoc_insertion_point(field_get:Order.quantity)
  return _internal_quantity();
}
inline void Order::set_quantity(::int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Order.quantity)
}
inline ::int32_t Order::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void Order::_internal_set_quantity(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// .TimeInForce time_in_force = 8;
inline void Order::clear_time_in_force() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_in_force_ = 0;
}
inline ::TimeInForce Order::time_in_force() const {
  // @@protoc_insertion_point(field_get:Order.time_in_force)
  return _internal_time_in_force();
}
inline void Order::set_time_in_force(::TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:Order.time_in_force)
}
inline ::TimeInForce Order::_internal_time_in_force() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::TimeInForce>(_impl_.time_in_force_);
}
inline void Order::_internal_set_time_in_force(::TimeInForce value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_in_force_ = value;
}

// string account_id = 9;
inline void Order::clear_account_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& Order::account_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Order.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Order.account_id)
}
inline std::string* Order::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:Order.account_id)
  return _s;
}
inline const std::string& Order::_internal_account_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_id_.Get();
}
inline void Order::_internal_set_account_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_account_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* Order::release_account_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Order.account_id)
  return _impl_.account_id_.Release();
}
inline void Order::set_allocated_account_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.account_id_.IsDefault()) {
    _impl_.account_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Order.account_id)
}

// int64 timestamp = 10;
inline void Order::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Order::timestamp() const {
  // @@protoc_insertion_point(field_get:Order.timestamp)
  return _internal_timestamp();
}
inline void Order::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Order.timestamp)
}
inline ::int64_t Order::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Order::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// string exchange_id = 11;
inline void Order::clear_exchange_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& Order::exchange_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Order.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Order.exchange_id)
}
inline std::string* Order::mutable_exchange_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:Order.exchange_id)
  return _s;
}
inline const std::string& Order::_internal_exchange_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchange_id_.Get();
}
inline void Order::_internal_set_exchange_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_exchange_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.exchange_id_.Mutable( GetArena());
}
inline std::string* Order::release_exchange_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Order.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void Order::set_allocated_exchange_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.exchange_id_.IsDefault()) {
    _impl_.exchange_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Order.exchange_id)
}

// -------------------------------------------------------------------

// ExecutionReport

// string order_id = 1;
inline void ExecutionReport::clear_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& ExecutionReport::order_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExecutionReport.order_id)
  return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecutionReport::set_order_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExecutionReport.order_id)
}
inline std::string* ExecutionReport::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:ExecutionReport.order_id)
  return _s;
}
inline const std::string& ExecutionReport::_internal_order_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_id_.Get();
}
inline void ExecutionReport::_internal_set_order_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(value, GetArena());
}
inline std::string* ExecutionReport::_internal_mutable_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* ExecutionReport::release_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExecutionReport.order_id)
  return _impl_.order_id_.Release();
}
inline void ExecutionReport::set_allocated_order_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ExecutionReport.order_id)
}

// string execution_id = 2;
inline void ExecutionReport::clear_execution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.ClearToEmpty();
}
inline const std::string& ExecutionReport::execution_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExecutionReport.execution_id)
  return _internal_execution_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecutionReport::set_execution_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExecutionReport.execution_id)
}
inline std::string* ExecutionReport::mutable_execution_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_execution_id();
  // @@protoc_insertion_point(field_mutable:ExecutionReport.execution_id)
  return _s;
}
inline const std::string& ExecutionReport::_internal_execution_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.execution_id_.Get();
}
inline void ExecutionReport::_internal_set_execution_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.Set(value, GetArena());
}
inline std::string* ExecutionReport::_internal_mutable_execution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.execution_id_.Mutable( GetArena());
}
inline std::string* ExecutionReport::release_execution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExecutionReport.execution_id)
  return _impl_.execution_id_.Release();
}
inline void ExecutionReport::set_allocated_execution_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.execution_id_.IsDefault()) {
    _impl_.execution_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ExecutionReport.execution_id)
}

// .ExecutionType execution_type = 3;
inline void ExecutionReport::clear_execution_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_type_ = 0;
}
inline ::ExecutionType ExecutionReport::execution_type() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.execution_type)
  return _internal_execution_type();
}
inline void ExecutionReport::set_execution_type(::ExecutionType value) {
  _internal_set_execution_type(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.execution_type)
}
inline ::ExecutionType ExecutionReport::_internal_execution_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ExecutionType>(_impl_.execution_type_);
}
inline void ExecutionReport::_internal_set_execution_type(::ExecutionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_type_ = value;
}

// string symbol = 4;
inline void ExecutionReport::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& ExecutionReport::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExecutionReport.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecutionReport::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExecutionReport.symbol)
}
inline std::string* ExecutionReport::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:ExecutionReport.symbol)
  return _s;
}
inline const std::string& ExecutionReport::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void ExecutionReport::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* ExecutionReport::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* ExecutionReport::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExecutionReport.symbol)
  return _impl_.symbol_.Release();
}
inline void ExecutionReport::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ExecutionReport.symbol)
}

// .Side side = 5;
inline void ExecutionReport::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = 0;
}
inline ::Side ExecutionReport::side() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.side)
  return _internal_side();
}
inline void ExecutionReport::set_side(::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.side)
}
inline ::Side ExecutionReport::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Side>(_impl_.side_);
}
inline void ExecutionReport::_internal_set_side(::Side value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = value;
}

// double executed_price = 6;
inline void ExecutionReport::clear_executed_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_price_ = 0;
}
inline double ExecutionReport::executed_price() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.executed_price)
  return _internal_executed_price();
}
inline void ExecutionReport::set_executed_price(double value) {
  _internal_set_executed_price(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.executed_price)
}
inline double ExecutionReport::_internal_executed_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executed_price_;
}
inline void ExecutionReport::_internal_set_executed_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_price_ = value;
}

// int32 executed_quantity = 7;
inline void ExecutionReport::clear_executed_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_quantity_ = 0;
}
inline ::int32_t ExecutionReport::executed_quantity() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.executed_quantity)
  return _internal_executed_quantity();
}
inline void ExecutionReport::set_executed_quantity(::int32_t value) {
  _internal_set_executed_quantity(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.executed_quantity)
}
inline ::int32_t ExecutionReport::_internal_executed_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executed_quantity_;
}
inline void ExecutionReport::_internal_set_executed_quantity(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_quantity_ = value;
}

// int32 remaining_quantity = 8;
inline void ExecutionReport::clear_remaining_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_quantity_ = 0;
}
inline ::int32_t ExecutionReport::remaining_quantity() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.remaining_quantity)
  return _internal_remaining_quantity();
}
inline void ExecutionReport::set_remaining_quantity(::int32_t value) {
  _internal_set_remaining_quantity(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.remaining_quantity)
}
inline ::int32_t ExecutionReport::_internal_remaining_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_quantity_;
}
inline void ExecutionReport::_internal_set_remaining_quantity(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_quantity_ = value;
}

// double average_price = 9;
inline void ExecutionReport::clear_average_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_price_ = 0;
}
inline double ExecutionReport::average_price() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.average_price)
  return _internal_average_price();
}
inline void ExecutionReport::set_average_price(double value) {
  _internal_set_average_price(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.average_price)
}
inline double ExecutionReport::_internal_average_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_price_;
}
inline void ExecutionReport::_internal_set_average_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_price_ = value;
}

// string reject_reason = 10;
inline void ExecutionReport::clear_reject_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reject_reason_.ClearToEmpty();
}
inline const std::string& ExecutionReport::reject_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExecutionReport.reject_reason)
  return _internal_reject_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecutionReport::set_reject_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reject_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExecutionReport.reject_reason)
}
inline std::string* ExecutionReport::mutable_reject_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reject_reason();
  // @@protoc_insertion_point(field_mutable:ExecutionReport.reject_reason)
  return _s;
}
inline const std::string& ExecutionReport::_internal_reject_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reject_reason_.Get();
}
inline void ExecutionReport::_internal_set_reject_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reject_reason_.Set(value, GetArena());
}
inline std::string* ExecutionReport::_internal_mutable_reject_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reject_reason_.Mutable( GetArena());
}
inline std::string* ExecutionReport::release_reject_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExecutionReport.reject_reason)
  return _impl_.reject_reason_.Release();
}
inline void ExecutionReport::set_allocated_reject_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reject_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reject_reason_.IsDefault()) {
    _impl_.reject_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ExecutionReport.reject_reason)
}

// int64 timestamp = 11;
inline void ExecutionReport::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t ExecutionReport::timestamp() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.timestamp)
  return _internal_timestamp();
}
inline void ExecutionReport::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.timestamp)
}
inline ::int64_t ExecutionReport::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void ExecutionReport::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// string exchange_id = 12;
inline void ExecutionReport::clear_exchange_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& ExecutionReport::exchange_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExecutionReport.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecutionReport::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExecutionReport.exchange_id)
}
inline std::string* ExecutionReport::mutable_exchange_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:ExecutionReport.exchange_id)
  return _s;
}
inline const std::string& ExecutionReport::_internal_exchange_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchange_id_.Get();
}
inline void ExecutionReport::_internal_set_exchange_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.Set(value, GetArena());
}
inline std::string* ExecutionReport::_internal_mutable_exchange_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.exchange_id_.Mutable( GetArena());
}
inline std::string* ExecutionReport::release_exchange_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExecutionReport.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void ExecutionReport::set_allocated_exchange_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.exchange_id_.IsDefault()) {
    _impl_.exchange_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ExecutionReport.exchange_id)
}

// double commission = 13;
inline void ExecutionReport::clear_commission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commission_ = 0;
}
inline double ExecutionReport::commission() const {
  // @@protoc_insertion_point(field_get:ExecutionReport.commission)
  return _internal_commission();
}
inline void ExecutionReport::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:ExecutionReport.commission)
}
inline double ExecutionReport::_internal_commission() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.commission_;
}
inline void ExecutionReport::_internal_set_commission(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commission_ = value;
}

// string additional_info = 14;
inline void ExecutionReport::clear_additional_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_info_.ClearToEmpty();
}
inline const std::string& ExecutionReport::additional_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExecutionReport.additional_info)
  return _internal_additional_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecutionReport::set_additional_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExecutionReport.additional_info)
}
inline std::string* ExecutionReport::mutable_additional_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_additional_info();
  // @@protoc_insertion_point(field_mutable:ExecutionReport.additional_info)
  return _s;
}
inline const std::string& ExecutionReport::_internal_additional_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.additional_info_.Get();
}
inline void ExecutionReport::_internal_set_additional_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_info_.Set(value, GetArena());
}
inline std::string* ExecutionReport::_internal_mutable_additional_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.additional_info_.Mutable( GetArena());
}
inline std::string* ExecutionReport::release_additional_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExecutionReport.additional_info)
  return _impl_.additional_info_.Release();
}
inline void ExecutionReport::set_allocated_additional_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.additional_info_.IsDefault()) {
    _impl_.additional_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ExecutionReport.additional_info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Side> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Side>() {
  return ::Side_descriptor();
}
template <>
struct is_proto_enum<::OrderType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::OrderType>() {
  return ::OrderType_descriptor();
}
template <>
struct is_proto_enum<::TimeInForce> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TimeInForce>() {
  return ::TimeInForce_descriptor();
}
template <>
struct is_proto_enum<::ExecutionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ExecutionType>() {
  return ::ExecutionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2forder_2eproto_2epb_2eh
