// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/order.proto
// Protobuf C++ Version: 5.29.0

#include "proto/order.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Order::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : order_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        account_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        side_{static_cast< ::Side >(0)},
        order_type_{static_cast< ::OrderType >(0)},
        price_{0},
        stop_price_{0},
        quantity_{0},
        time_in_force_{static_cast< ::TimeInForce >(0)},
        timestamp_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Order::Order(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;

inline constexpr ExecutionReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : order_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        execution_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reject_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        additional_info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        execution_type_{static_cast< ::ExecutionType >(0)},
        side_{static_cast< ::Side >(0)},
        executed_price_{0},
        executed_quantity_{0},
        remaining_quantity_{0},
        average_price_{0},
        timestamp_{::int64_t{0}},
        commission_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExecutionReport::ExecutionReport(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExecutionReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionReportDefaultTypeInternal() {}
  union {
    ExecutionReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionReportDefaultTypeInternal _ExecutionReport_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2forder_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2forder_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2forder_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Order, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.order_id_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.order_type_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.stop_price_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.quantity_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.time_in_force_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::Order, _impl_.exchange_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.order_id_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.execution_id_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.execution_type_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.executed_price_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.executed_quantity_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.remaining_quantity_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.average_price_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.reject_reason_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.exchange_id_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.commission_),
        PROTOBUF_FIELD_OFFSET(::ExecutionReport, _impl_.additional_info_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Order)},
        {19, -1, -1, sizeof(::ExecutionReport)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_Order_default_instance_._instance,
    &::_ExecutionReport_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2forder_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021proto/order.proto\"\364\001\n\005Order\022\020\n\010order_i"
    "d\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\023\n\004side\030\003 \001(\0162\005."
    "Side\022\036\n\norder_type\030\004 \001(\0162\n.OrderType\022\r\n\005"
    "price\030\005 \001(\001\022\022\n\nstop_price\030\006 \001(\001\022\020\n\010quant"
    "ity\030\007 \001(\005\022#\n\rtime_in_force\030\010 \001(\0162\014.TimeI"
    "nForce\022\022\n\naccount_id\030\t \001(\t\022\021\n\ttimestamp\030"
    "\n \001(\003\022\023\n\013exchange_id\030\013 \001(\t\"\330\002\n\017Execution"
    "Report\022\020\n\010order_id\030\001 \001(\t\022\024\n\014execution_id"
    "\030\002 \001(\t\022&\n\016execution_type\030\003 \001(\0162\016.Executi"
    "onType\022\016\n\006symbol\030\004 \001(\t\022\023\n\004side\030\005 \001(\0162\005.S"
    "ide\022\026\n\016executed_price\030\006 \001(\001\022\031\n\021executed_"
    "quantity\030\007 \001(\005\022\032\n\022remaining_quantity\030\010 \001"
    "(\005\022\025\n\raverage_price\030\t \001(\001\022\025\n\rreject_reas"
    "on\030\n \001(\t\022\021\n\ttimestamp\030\013 \001(\003\022\023\n\013exchange_"
    "id\030\014 \001(\t\022\022\n\ncommission\030\r \001(\001\022\027\n\017addition"
    "al_info\030\016 \001(\t*\031\n\004Side\022\007\n\003BUY\020\000\022\010\n\004SELL\020\001"
    "*<\n\tOrderType\022\n\n\006MARKET\020\000\022\t\n\005LIMIT\020\001\022\010\n\004"
    "STOP\020\002\022\016\n\nSTOP_LIMIT\020\003*W\n\013TimeInForce\022\024\n"
    "\020GOOD_TILL_CANCEL\020\000\022\027\n\023IMMEDIATE_OR_CANC"
    "EL\020\001\022\020\n\014FILL_OR_KILL\020\002\022\007\n\003DAY\020\003*^\n\rExecu"
    "tionType\022\007\n\003NEW\020\000\022\020\n\014PARTIAL_FILL\020\001\022\010\n\004F"
    "ILL\020\002\022\r\n\tCANCELLED\020\003\022\014\n\010REJECTED\020\004\022\013\n\007EX"
    "PIRED\020\00527\n\013OrderRouter\022(\n\nRouteOrder\022\006.O"
    "rder\032\020.ExecutionReport\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2forder_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2forder_2eproto = {
    false,
    false,
    952,
    descriptor_table_protodef_proto_2forder_2eproto,
    "proto/order.proto",
    &descriptor_table_proto_2forder_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_proto_2forder_2eproto::offsets,
    file_level_enum_descriptors_proto_2forder_2eproto,
    file_level_service_descriptors_proto_2forder_2eproto,
};
const ::google::protobuf::EnumDescriptor* Side_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2forder_2eproto);
  return file_level_enum_descriptors_proto_2forder_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Side_internal_data_[] = {
    131072u, 0u, };
bool Side_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* OrderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2forder_2eproto);
  return file_level_enum_descriptors_proto_2forder_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t OrderType_internal_data_[] = {
    262144u, 0u, };
bool OrderType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* TimeInForce_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2forder_2eproto);
  return file_level_enum_descriptors_proto_2forder_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TimeInForce_internal_data_[] = {
    262144u, 0u, };
bool TimeInForce_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* ExecutionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2forder_2eproto);
  return file_level_enum_descriptors_proto_2forder_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t ExecutionType_internal_data_[] = {
    393216u, 0u, };
bool ExecutionType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class Order::_Internal {
 public:
};

Order::Order(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Order& from_msg)
      : order_id_(arena, from.order_id_),
        symbol_(arena, from.symbol_),
        account_id_(arena, from.account_id_),
        exchange_id_(arena, from.exchange_id_),
        _cached_size_{0} {}

Order::Order(
    ::google::protobuf::Arena* arena,
    const Order& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Order* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, side_),
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, side_) +
               sizeof(Impl_::timestamp_));

  // @@protoc_insertion_point(copy_constructor:Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : order_id_(arena),
        symbol_(arena),
        account_id_(arena),
        exchange_id_(arena),
        _cached_size_{0} {}

inline void Order::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, side_) +
               sizeof(Impl_::timestamp_));
}
Order::~Order() {
  // @@protoc_insertion_point(destructor:Order)
  SharedDtor(*this);
}
inline void Order::SharedDtor(MessageLite& self) {
  Order& this_ = static_cast<Order&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.order_id_.Destroy();
  this_._impl_.symbol_.Destroy();
  this_._impl_.account_id_.Destroy();
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Order::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Order(arena);
}
constexpr auto Order::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Order),
                                            alignof(Order));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Order::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Order_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Order::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Order>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Order::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Order>(), &Order::ByteSizeLong,
            &Order::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Order, _impl_._cached_size_),
        false,
    },
    &Order::kDescriptorMethods,
    &descriptor_table_proto_2forder_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Order::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 57, 2> Order::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Order>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string order_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.order_id_)}},
    // string symbol = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.symbol_)}},
    // .Side side = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Order, _impl_.side_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.side_)}},
    // .OrderType order_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Order, _impl_.order_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.order_type_)}},
    // double price = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)}},
    // double stop_price = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.stop_price_)}},
    // int32 quantity = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Order, _impl_.quantity_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_)}},
    // .TimeInForce time_in_force = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Order, _impl_.time_in_force_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.time_in_force_)}},
    // string account_id = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.account_id_)}},
    // int64 timestamp = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Order, _impl_.timestamp_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.timestamp_)}},
    // string exchange_id = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.exchange_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string order_id = 1;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.order_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string symbol = 2;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Side side = 3;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .OrderType order_type = 4;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.order_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double price = 5;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double stop_price = 6;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.stop_price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 quantity = 7;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .TimeInForce time_in_force = 8;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.time_in_force_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string account_id = 9;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.account_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 10;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string exchange_id = 11;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.exchange_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\5\10\6\0\0\0\0\0\0\12\0\13\0\0\0\0"
    "Order"
    "order_id"
    "symbol"
    "account_id"
    "exchange_id"
  }},
};

PROTOBUF_NOINLINE void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:Order)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_id_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.exchange_id_.ClearToEmpty();
  ::memset(&_impl_.side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.side_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Order::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Order& this_ = static_cast<const Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Order::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Order)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string order_id = 1;
          if (!this_._internal_order_id().empty()) {
            const std::string& _s = this_._internal_order_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Order.order_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string symbol = 2;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Order.symbol");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .Side side = 3;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_side(), target);
          }

          // .OrderType order_type = 4;
          if (this_._internal_order_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_order_type(), target);
          }

          // double price = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_price(), target);
          }

          // double stop_price = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_stop_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_stop_price(), target);
          }

          // int32 quantity = 7;
          if (this_._internal_quantity() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_quantity(), target);
          }

          // .TimeInForce time_in_force = 8;
          if (this_._internal_time_in_force() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                8, this_._internal_time_in_force(), target);
          }

          // string account_id = 9;
          if (!this_._internal_account_id().empty()) {
            const std::string& _s = this_._internal_account_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Order.account_id");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // int64 timestamp = 10;
          if (this_._internal_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<10>(
                    stream, this_._internal_timestamp(), target);
          }

          // string exchange_id = 11;
          if (!this_._internal_exchange_id().empty()) {
            const std::string& _s = this_._internal_exchange_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Order.exchange_id");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Order)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Order::ByteSizeLong(const MessageLite& base) {
          const Order& this_ = static_cast<const Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Order::ByteSizeLong() const {
          const Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Order)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string order_id = 1;
            if (!this_._internal_order_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_order_id());
            }
            // string symbol = 2;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // string account_id = 9;
            if (!this_._internal_account_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_account_id());
            }
            // string exchange_id = 11;
            if (!this_._internal_exchange_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange_id());
            }
            // .Side side = 3;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // .OrderType order_type = 4;
            if (this_._internal_order_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_order_type());
            }
            // double price = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
              total_size += 9;
            }
            // double stop_price = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_stop_price()) != 0) {
              total_size += 9;
            }
            // int32 quantity = 7;
            if (this_._internal_quantity() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_quantity());
            }
            // .TimeInForce time_in_force = 8;
            if (this_._internal_time_in_force() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_time_in_force());
            }
            // int64 timestamp = 10;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_timestamp());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Order::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (from._internal_order_type() != 0) {
    _this->_impl_.order_type_ = from._impl_.order_type_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
    _this->_impl_.price_ = from._impl_.price_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_stop_price()) != 0) {
    _this->_impl_.stop_price_ = from._impl_.stop_price_;
  }
  if (from._internal_quantity() != 0) {
    _this->_impl_.quantity_ = from._impl_.quantity_;
  }
  if (from._internal_time_in_force() != 0) {
    _this->_impl_.time_in_force_ = from._impl_.time_in_force_;
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Order::InternalSwap(Order* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_id_, &other->_impl_.order_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, &other->_impl_.account_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.timestamp_)
      + sizeof(Order::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.side_)>(
          reinterpret_cast<char*>(&_impl_.side_),
          reinterpret_cast<char*>(&other->_impl_.side_));
}

::google::protobuf::Metadata Order::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExecutionReport::_Internal {
 public:
};

ExecutionReport::ExecutionReport(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ExecutionReport)
}
inline PROTOBUF_NDEBUG_INLINE ExecutionReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ExecutionReport& from_msg)
      : order_id_(arena, from.order_id_),
        execution_id_(arena, from.execution_id_),
        symbol_(arena, from.symbol_),
        reject_reason_(arena, from.reject_reason_),
        exchange_id_(arena, from.exchange_id_),
        additional_info_(arena, from.additional_info_),
        _cached_size_{0} {}

ExecutionReport::ExecutionReport(
    ::google::protobuf::Arena* arena,
    const ExecutionReport& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExecutionReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, execution_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, execution_type_),
           offsetof(Impl_, commission_) -
               offsetof(Impl_, execution_type_) +
               sizeof(Impl_::commission_));

  // @@protoc_insertion_point(copy_constructor:ExecutionReport)
}
inline PROTOBUF_NDEBUG_INLINE ExecutionReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : order_id_(arena),
        execution_id_(arena),
        symbol_(arena),
        reject_reason_(arena),
        exchange_id_(arena),
        additional_info_(arena),
        _cached_size_{0} {}

inline void ExecutionReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, execution_type_),
           0,
           offsetof(Impl_, commission_) -
               offsetof(Impl_, execution_type_) +
               sizeof(Impl_::commission_));
}
ExecutionReport::~ExecutionReport() {
  // @@protoc_insertion_point(destructor:ExecutionReport)
  SharedDtor(*this);
}
inline void ExecutionReport::SharedDtor(MessageLite& self) {
  ExecutionReport& this_ = static_cast<ExecutionReport&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.order_id_.Destroy();
  this_._impl_.execution_id_.Destroy();
  this_._impl_.symbol_.Destroy();
  this_._impl_.reject_reason_.Destroy();
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.additional_info_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ExecutionReport::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExecutionReport(arena);
}
constexpr auto ExecutionReport::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ExecutionReport),
                                            alignof(ExecutionReport));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExecutionReport::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExecutionReport_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExecutionReport::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExecutionReport>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExecutionReport::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExecutionReport>(), &ExecutionReport::ByteSizeLong,
            &ExecutionReport::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_._cached_size_),
        false,
    },
    &ExecutionReport::kDescriptorMethods,
    &descriptor_table_proto_2forder_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExecutionReport::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 97, 2> ExecutionReport::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ExecutionReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string order_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.order_id_)}},
    // string execution_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.execution_id_)}},
    // .ExecutionType execution_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionReport, _impl_.execution_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.execution_type_)}},
    // string symbol = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.symbol_)}},
    // .Side side = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionReport, _impl_.side_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.side_)}},
    // double executed_price = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.executed_price_)}},
    // int32 executed_quantity = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionReport, _impl_.executed_quantity_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.executed_quantity_)}},
    // int32 remaining_quantity = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionReport, _impl_.remaining_quantity_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.remaining_quantity_)}},
    // double average_price = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.average_price_)}},
    // string reject_reason = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.reject_reason_)}},
    // int64 timestamp = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ExecutionReport, _impl_.timestamp_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.timestamp_)}},
    // string exchange_id = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.exchange_id_)}},
    // double commission = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.commission_)}},
    // string additional_info = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.additional_info_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string order_id = 1;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.order_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string execution_id = 2;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.execution_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .ExecutionType execution_type = 3;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.execution_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string symbol = 4;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Side side = 5;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double executed_price = 6;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.executed_price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 executed_quantity = 7;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.executed_quantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 remaining_quantity = 8;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.remaining_quantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double average_price = 9;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.average_price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string reject_reason = 10;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.reject_reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 11;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string exchange_id = 12;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.exchange_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double commission = 13;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.commission_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string additional_info = 14;
    {PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.additional_info_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\10\14\0\6\0\0\0\0\0\15\0\13\0\17\0"
    "ExecutionReport"
    "order_id"
    "execution_id"
    "symbol"
    "reject_reason"
    "exchange_id"
    "additional_info"
  }},
};

PROTOBUF_NOINLINE void ExecutionReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ExecutionReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_id_.ClearToEmpty();
  _impl_.execution_id_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.reject_reason_.ClearToEmpty();
  _impl_.exchange_id_.ClearToEmpty();
  _impl_.additional_info_.ClearToEmpty();
  ::memset(&_impl_.execution_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.commission_) -
      reinterpret_cast<char*>(&_impl_.execution_type_)) + sizeof(_impl_.commission_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExecutionReport::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExecutionReport& this_ = static_cast<const ExecutionReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExecutionReport::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExecutionReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ExecutionReport)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string order_id = 1;
          if (!this_._internal_order_id().empty()) {
            const std::string& _s = this_._internal_order_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ExecutionReport.order_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string execution_id = 2;
          if (!this_._internal_execution_id().empty()) {
            const std::string& _s = this_._internal_execution_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ExecutionReport.execution_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .ExecutionType execution_type = 3;
          if (this_._internal_execution_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_execution_type(), target);
          }

          // string symbol = 4;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ExecutionReport.symbol");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // .Side side = 5;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_side(), target);
          }

          // double executed_price = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_executed_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_executed_price(), target);
          }

          // int32 executed_quantity = 7;
          if (this_._internal_executed_quantity() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_executed_quantity(), target);
          }

          // int32 remaining_quantity = 8;
          if (this_._internal_remaining_quantity() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_remaining_quantity(), target);
          }

          // double average_price = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_average_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_average_price(), target);
          }

          // string reject_reason = 10;
          if (!this_._internal_reject_reason().empty()) {
            const std::string& _s = this_._internal_reject_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ExecutionReport.reject_reason");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // int64 timestamp = 11;
          if (this_._internal_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<11>(
                    stream, this_._internal_timestamp(), target);
          }

          // string exchange_id = 12;
          if (!this_._internal_exchange_id().empty()) {
            const std::string& _s = this_._internal_exchange_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ExecutionReport.exchange_id");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // double commission = 13;
          if (::absl::bit_cast<::uint64_t>(this_._internal_commission()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_commission(), target);
          }

          // string additional_info = 14;
          if (!this_._internal_additional_info().empty()) {
            const std::string& _s = this_._internal_additional_info();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ExecutionReport.additional_info");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ExecutionReport)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExecutionReport::ByteSizeLong(const MessageLite& base) {
          const ExecutionReport& this_ = static_cast<const ExecutionReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExecutionReport::ByteSizeLong() const {
          const ExecutionReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ExecutionReport)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string order_id = 1;
            if (!this_._internal_order_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_order_id());
            }
            // string execution_id = 2;
            if (!this_._internal_execution_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_execution_id());
            }
            // string symbol = 4;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // string reject_reason = 10;
            if (!this_._internal_reject_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reject_reason());
            }
            // string exchange_id = 12;
            if (!this_._internal_exchange_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange_id());
            }
            // string additional_info = 14;
            if (!this_._internal_additional_info().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_additional_info());
            }
            // .ExecutionType execution_type = 3;
            if (this_._internal_execution_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_execution_type());
            }
            // .Side side = 5;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // double executed_price = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_executed_price()) != 0) {
              total_size += 9;
            }
            // int32 executed_quantity = 7;
            if (this_._internal_executed_quantity() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_executed_quantity());
            }
            // int32 remaining_quantity = 8;
            if (this_._internal_remaining_quantity() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_remaining_quantity());
            }
            // double average_price = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_average_price()) != 0) {
              total_size += 9;
            }
            // int64 timestamp = 11;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_timestamp());
            }
            // double commission = 13;
            if (::absl::bit_cast<::uint64_t>(this_._internal_commission()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExecutionReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExecutionReport*>(&to_msg);
  auto& from = static_cast<const ExecutionReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExecutionReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_execution_id().empty()) {
    _this->_internal_set_execution_id(from._internal_execution_id());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_reject_reason().empty()) {
    _this->_internal_set_reject_reason(from._internal_reject_reason());
  }
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_additional_info().empty()) {
    _this->_internal_set_additional_info(from._internal_additional_info());
  }
  if (from._internal_execution_type() != 0) {
    _this->_impl_.execution_type_ = from._impl_.execution_type_;
  }
  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_executed_price()) != 0) {
    _this->_impl_.executed_price_ = from._impl_.executed_price_;
  }
  if (from._internal_executed_quantity() != 0) {
    _this->_impl_.executed_quantity_ = from._impl_.executed_quantity_;
  }
  if (from._internal_remaining_quantity() != 0) {
    _this->_impl_.remaining_quantity_ = from._impl_.remaining_quantity_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_average_price()) != 0) {
    _this->_impl_.average_price_ = from._impl_.average_price_;
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_commission()) != 0) {
    _this->_impl_.commission_ = from._impl_.commission_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionReport::CopyFrom(const ExecutionReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExecutionReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExecutionReport::InternalSwap(ExecutionReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_id_, &other->_impl_.order_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_id_, &other->_impl_.execution_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reject_reason_, &other->_impl_.reject_reason_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.additional_info_, &other->_impl_.additional_info_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.commission_)
      + sizeof(ExecutionReport::_impl_.commission_)
      - PROTOBUF_FIELD_OFFSET(ExecutionReport, _impl_.execution_type_)>(
          reinterpret_cast<char*>(&_impl_.execution_type_),
          reinterpret_cast<char*>(&other->_impl_.execution_type_));
}

::google::protobuf::Metadata ExecutionReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2forder_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
